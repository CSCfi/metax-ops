- include_role: name=app_config

- name: Create folder {{ metax_app_base_path }}
  file: path={{ metax_app_base_path }} state=directory owner={{ app_user }} group=metax mode=0755

- name: Create django app logging directory
  file: path=/var/log/{{ app_name }} state=directory owner={{ app_user }} group=metax

- name: Create django app log file and ensure file permissions
  copy: content="" dest=/var/log/{{ app_name }}/{{ app_log_file }} force=no owner={{ app_user }} group=metax mode=0755

- name: Create logrotate entry for django app log file
  template: src=templates/logrotate_metax dest=/etc/logrotate.d/{{ app_name }}

- name: Clone project remote repo from branch {{ project_repo_branch }} to {{ metax_app_base_path }}
  git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
  become_user: "{{ app_user }}"

- block:

    - name: Symlink pre-commit hook in .githooks/ to .git/hooks/
      shell: cd {{ metax_app_base_path }}/.git/hooks; ln -sfn ../../.githooks/pre-commit pre-commit

    - name: Update app python package requirements to their latest versions
      shell: pur --force --requirement {{ metax_app_base_path }}/requirements.txt
      become_user: "{{ app_user }}"

  when: deployment_environment_id == 'local_development'

- name: Install app python package requirements
  pip: requirements={{ metax_app_base_path }}/requirements.txt virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"

- name: Create directory for static files
  file: path={{ static_root }} state=directory owner={{ app_user }} group=metax

- include_role: name=gunicorn

- name: Create cronjob for updating reference data in local cache
  cron:
    name: "Update reference and organization data in local cache"
    minute: "00"
    hour: "4"
    job: "{{ python_virtualenv_path }}/bin/python {{ metax_django_base_path}}/manage.py updatereferencedata"
    state: present
    user: "{{ app_user }}"

- name: Create cronjob for cleaning up old ApiError files
  cron:
    name: "Cleanup old ApiError files"
    minute: "00"
    hour: "5"
    job: "find /var/log/{{ app_name }}/errors/ -type f -mtime +30 -name '*.json' -delete"
    state: present
    user: "{{ app_user }}"

- include_role: name=django_migrate

- name: Django collectstatic
  django_manage: command=collectstatic app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  when: deployment_environment_id in ['local_development', 'test', 'stable']

- name: Load Django testdata to database
  django_manage: command=loaddata fixtures=metax_api/tests/testdata/test_data.json app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  # when: deployment_environment_id in ['test', 'stable']
  when: deployment_environment_id in ['test', 'stable']

- name: Load Metax initial production data
  django_manage: command=loadinitialdata app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  when: deployment_environment_id != 'local_development'

- name: Run PUT requests on Django testdata
  shell: su - {{ app_user }} -c '{{ python_virtualenv_path }}/bin/python {{ metax_django_base_path }}/metax_api/tests/testdata/fetch_and_update_datasets.py'
  # when: deployment_environment_id in ['test', 'stable']
  when: deployment_environment_id in ['test', 'stable']

- debug:
    msg: "Local dev environment successfully set up. Switch to using {{ app_user }} by saying 'sudo su - {{ app_user }}', then run the application by saying 'runserver' and finally, in another terminal, switch to {{ app_user }} and run 'dev-init'."
  when: deployment_environment_id == 'local_development'

- debug:
    msg: "{{ deployment_environment_id }} environment successfully set up."
  when: deployment_environment_id != 'local_development'
