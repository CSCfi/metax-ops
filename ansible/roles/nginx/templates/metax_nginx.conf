user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 768;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log on;
    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    # request timeout 3 days
    proxy_connect_timeout       259200;
    proxy_send_timeout          259200;
    proxy_read_timeout          259200;
    send_timeout                259200;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    gzip on;
    gzip_disable "msie6";

    server {

        # port 80 only redirects to https

        listen 80 default_server;
        server_name {{ server_domain_name }};
        return 301 https://$host$request_uri;
        access_log on;
    }

    upstream elasticsearch {
        keepalive 15;
        server {{ searchserver_1_internal_ip | default('127.0.0.1') }}:{{ elasticsearch.port }} weight=3;
{% if searchserver_2_internal_ip is not undefined %}
        server {{ searchserver_2_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
{% if searchserver_3_internal_ip is not undefined %}
        server {{ searchserver_3_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
    }

    server {

        # https configuration

        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name {{ server_domain_name }};
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
        ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
        ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};
        client_max_body_size 0;

        location /es/_search/ {
            proxy_pass http://elasticsearch/_search/;
            limit_except GET DELETE {
                auth_basic 'Credentials required';
                auth_basic_user_file /etc/nginx/nginx_auth;
            }
        }

        location /es/ {
            proxy_pass http://elasticsearch/;
            limit_except GET HEAD {
                auth_basic 'Credentials required';
                auth_basic_user_file /etc/nginx/nginx_auth;
            }
        }

        location /static/ {
            alias {{ static_root }}/;
        }

        location /secure/ {
            proxy_pass http://127.0.0.1:{{ httpd_listen_port }}/secure/;
            proxy_set_header Host {{ server_domain_name }};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # apis which allow end user write operations: datasets and files    
        location ~* (/rest/(v\d/)?datasets|/rest/(v\d/)?files) {
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
            }
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # apis which allow only trusted services to write

        location / {
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
            }
            proxy_pass {{ nginx_gunicorn_proxy_pass }};
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            limit_except GET HEAD {
            {% for ip_addr in nginx_whitelisted_ip_addresses_for_metax_api_writes %}
  allow {{ ip_addr }};
            {% endfor %}
              allow ::1;
              deny all;
              auth_basic 'Credentials required';
              auth_basic_user_file /etc/nginx/nginx_auth;
            }
        }
    }
}
