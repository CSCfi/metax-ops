user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 768;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log on;
    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    # request timeout 3 days
    proxy_connect_timeout       259200;
    proxy_send_timeout          259200;
    proxy_read_timeout          259200;
    send_timeout                259200;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    server_tokens       off;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # include common add_header statements for all responses.
    # note: if inheriting blocks add more add_header statements, all
    # previously included headers will be discarded!!
    include shared_headers.conf;

    gzip on;
    gzip_disable "msie6";

    # use in api responses. see api_response_headers.conf
    map $sent_http_content_type $content_disposition {
{% if deployment_environment_id in ['production', 'demo'] %}
        default                            "attachment; filename=response.json";
        "text/html"                        "attachment; filename=response.json";
        "text/html; charset=utf-8"         "attachment; filename=response.json";
{% endif %}
{% if deployment_environment_id not in ['production', 'demo'] %}
        default                            "inline";
{% endif %}
        "application/json"                 "attachment; filename=response.json";
        "application/json; charset=utf-8"  "attachment; filename=response.json";
        "application/xml"                  "attachment; filename=response.xml";
        "application/xml; charset=utf-8"   "attachment; filename=response.xml";
    }

    server {
        # handle unknown domain names or Host header values
        listen 80 default_server;
        return 444;
    }

    server {
        # handle unknown domain names or Host header values
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        # are the rest necessary...? maybe move to include file
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
        ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
        ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};
        return 444;
    }

    server {
        # port 80 only redirects to https
        listen 80;
        server_name {{ server_domain_name }};
        access_log on;
        return 301 https://{{ server_domain_name }}$request_uri;
    }

    upstream elasticsearch {
        keepalive 15;
        server {{ searchserver_1_internal_ip | default('127.0.0.1') }}:{{ elasticsearch.port }} weight=3;
{% if searchserver_2_internal_ip is not undefined %}
        server {{ searchserver_2_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
{% if searchserver_3_internal_ip is not undefined %}
        server {{ searchserver_3_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
    }

    server {

        # https configuration

        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ server_domain_name }} 127.0.0.1 localhost;

        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
        ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
        ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};

        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        client_max_body_size 5G;

{% if deployment_environment_id not in ['production'] %}
        location =/robots.txt {
            include shared_headers.conf;
            include static_file_headers.conf;
            alias /etc/nginx/robots.txt;
        }
{% endif %}

        location /docs {
            # general api documentation
            alias {{ metax_app_base_path }}/docs/build/;

            include shared_headers.conf;
            include static_file_headers.conf;

            try_files $uri $uri/ =404;
        }

        location /apischemas {
            # make apischema files available for swagger $ref entries
            alias {{ metax_app_base_path }}/src/metax_api/api/rest/base/api_schemas/;
            include shared_headers.conf;
            include api_response_headers.conf;
            try_files $uri $uri/ =404;
        }

        location /swagger {
            include shared_headers.conf;
            add_header Cache-Control "public" always;
            add_header Content-Security-Policy "base-uri 'self'; default-src 'self'; style-src 'self' 'unsafe-inline' fonts.googleapis.com cdnjs.cloudflare.com fonts.gstatic.com; font-src 'self' fonts.googleapis.com fonts.gstatic.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' cdnjs.cloudflare.com; object-src 'none';";
            alias {{ metax_app_base_path }}/swagger/;
            try_files $uri $uri/ =404;
        }

        location /es/_search/ {
            include shared_headers.conf;
            include elastic_headers.conf;
            proxy_pass http://elasticsearch/_search/;
            limit_except GET DELETE {
                auth_basic 'Credentials required';
                auth_basic_user_file /etc/nginx/nginx_auth;
            }
        }

        location ~ ^/es/(_mapping|reference_data|organization_data) {
            include shared_headers.conf;
            include elastic_headers.conf;
            rewrite ^/es/(.*)$ /$1 break;
            proxy_pass http://elasticsearch;
            limit_except GET HEAD {
                auth_basic 'Credentials required';
                auth_basic_user_file /etc/nginx/nginx_auth;
            }
        }

        location /static/ {
            include shared_headers.conf;
            include static_file_headers.conf;
            alias {{ static_root }}/;
            try_files $uri $uri/ =404;
        }

        location /secure/ {
            include shared_headers.conf;
            add_header Cache-Control "no-store" always;
            proxy_pass http://127.0.0.1:{{ httpd_listen_port }}/secure/;
            proxy_set_header Host {{ server_domain_name }};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~* ^/(rest|rpc|oai|logout) {
            # main app
            include shared_headers.conf;
            include api_response_headers.conf;
            proxy_pass {{ nginx_gunicorn_proxy_pass }};
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            return 301 https://{{ server_domain_name }}/docs;
        }
    }
}
