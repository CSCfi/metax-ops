---

- name: Check if Rabbitmq has been installed
  stat: path=/usr/lib/rabbitmq/bin/rabbitmq-server
  register: rabbitmq_server

- block:
    - name: Install Erlang package
      yum: name=erlang state=latest

    - name: Install RabbitMQ server
      yum: name=rabbitmq-server state=present

    - name: Enable RabbitMQ management plugin (access it via <ip_address>:15672)
      rabbitmq_plugin: names=rabbitmq_management state=enabled

    - name: Restart RabbitMQ server
      service: name=rabbitmq-server enabled=yes state=restarted

  when: rabbitmq_server.stat.exists == False

- name: Enable RabbitMQ disk_free_limit configuration
  lineinfile:
    dest: "/etc/rabbitmq/rabbitmq.config"
    state: present
    regexp: "^.*\\{disk_free_limit, \\{mem_relative"
    line: "{disk_free_limit, {mem_relative, 1.5}}"

- name: Setup .erlang.cookie
  copy:
    dest: /var/lib/rabbitmq/.erlang.cookie
    content: "{{ rabbitmq.erlang_cookie }}"

- name: Restart RabbitMQ
  service: name=rabbitmq-server state=restarted

- block:
    - name: Add main virtual host for RabbitMQ
      rabbitmq_vhost:
        name: "{{ rabbitmq_common.vhost }}"
        state: present

    - name: Add new admin user for RabbitMQ
      rabbitmq_user:
        user: "{{ rabbitmq.admin_user }}"
        password: "{{ rabbitmq.admin_password }}"
        tags: administrator,admin
        permissions:
          - vhost: /
            configure_priv: .*
            read_priv: .*
            write_priv: .*
          - vhost: "{{ rabbitmq_common.vhost }}"
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present

    - name: Add metax-user for RabbitMQ
      rabbitmq_user:
        user: "{{ rabbitmq_common.user }}"
        password: "{{ rabbitmq_common.password }}"
        vhost: "{{ rabbitmq_common.vhost }}"
        configure_priv: .*
        write_priv: .*
        read_priv: .*
        state: present

    - name: Add known consumer users for RabbitMQ
      rabbitmq_user:
        user: "{{ item.name }}"
        password: "{{ item.password }}"
        vhost: "{{ item.vhost }}"
        configure_priv: "{{ item.permissions.conf }}"
        write_priv: "{{ item.permissions.write }}"
        read_priv: "{{ item.permissions.read }}"
        state: present
      with_items:
        - "{{ rabbitmq_consumers }}"

    - name: Remove default admin user
      rabbitmq_user: user=guest state=absent

  when: is_rabbitmq_master_node

# Setup cluster

- block:
    - name: Add entry 1 to /etc/hosts file for rabbitmq cluster
      lineinfile:
        dest: "/etc/hosts"
        state: present
        line: "{{ messageserver_1_external_ip }}\t{{ messageserver_1_hostname }}"

    - name: Add entry 2 to /etc/hosts file for rabbitmq cluster
      lineinfile:
        dest: "/etc/hosts"
        state: present
        line: "{{ messageserver_2_external_ip }}\t{{ messageserver_2_hostname }}"

    - name: Add entry 3 to /etc/hosts file for rabbitmq cluster
      lineinfile:
        dest: "/etc/hosts"
        state: present
        line: "{{ messageserver_3_external_ip }}\t{{ messageserver_3_hostname }}"

    - block:
        - name: Set RabbitMQ cluster name
          command: rabbitmqctl set_cluster_name {{ rabbitmq.cluster_name }}

        - name: Set RabbitMQ policy for automatic syncing/mirroring of etsin queues among cluster nodes (in metax virtual host)
          command: "rabbitmqctl set_policy -p metax autosync-queues \"etsin\" '{\"ha-mode\":\"all\",\"ha-sync-mode\":\"automatic\"}'"

      when: is_rabbitmq_master_node

    - block:
        - name: Stop RabbitMQ app in a slave node
          command: rabbitmqctl stop_app

        - name: Join slave node RabbitMQ to master node. NB, Here we assume messageserver_1 is the master node.
          command: rabbitmqctl join_cluster rabbit@{{ messageserver_1_hostname }}

        - name: Start RabbitMQ app in slave node
          command: rabbitmqctl start_app

      when: not is_rabbitmq_master_node

  when: deployment_environment_id != 'local_development'
