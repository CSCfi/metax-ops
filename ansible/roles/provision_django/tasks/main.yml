- include_role: name=app_config

- name: Create folder {{ metax_app_base_path }}
  file: path={{ metax_app_base_path }} state=directory owner={{ django_user }} group=metax mode=0755

- name: Create django app logging directory
  file: path=/var/log/{{ project_name }} state=directory owner={{ django_user }} group=metax

- name: Create django app log file and ensure file permissions
  copy: content="" dest=/var/log/{{ project_name }}/metax_api.log force=no owner={{ django_user }} group=metax mode=0755

- name: Clone project repo from branch {{ project_repo_branch }} to {{ metax_app_base_path }}
  git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
  become_user: "{{ django_user }}"
  ignore_errors: yes

- block:

    - name: Symlink pre-commit hook in .githooks/ to .git/hooks/
      shell: cd {{ metax_app_base_path }}/.git/hooks; ln -sfn ../../.githooks/pre-commit pre-commit

    - name: Update app python package requirements to their latest versions
      shell: pur --force --requirement {{ metax_app_base_path }}/requirements.txt
      become_user: "{{ django_user }}"

  when: deployment_environment_id == 'local_development'

- name: Install app python package requirements
  pip: requirements={{ metax_app_base_path }}/requirements.txt virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Create directory for static files
  file: path={{ static_root }} state=directory owner={{ django_user }} group=metax

- include_role: name=gunicorn

- name: Create cronjob for updating reference data in local cache
  cron:
    name: "Update reference and organization data in local cache"
    minute: "00"
    hour: "4"
    job: "{{ python_virtualenv_path }}/bin/python {{ metax_django_base_path}}/metax_api/cron/update_reference_data.py >> /var/log/{{ project_name }}/update_reference_data.log"
    state: present
    user: "{{ django_user }}"

- name: Delete old Django migration files
  shell: rm -rf __pycache__/;find . ! -name "*__keep*" -delete
  args:
    chdir: "{{ metax_django_base_path }}/{{ django_app_name }}/migrations"

- name: Django makemigrations
  django_manage: command="makemigrations --noinput {{ django_app_name }}" app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Django migrate
  django_manage: command=migrate app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Django collectstatic
  django_manage: command=collectstatic app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Load Django testdata to database
  django_manage: command=loaddata fixtures=metax_api/tests/testdata/test_data.json app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"
  when: deployment_environment_id in ['local_development', 'playground', 'test', 'stable']

- name: Run PUT requests on Django testdata
  shell: su - {{ django_user }} -c '{{ python_virtualenv_path }}/bin/python {{ metax_django_base_path }}/metax_api/tests/testdata/fetch_and_update_datasets.py'
  when: deployment_environment_id in ['local_development', 'playground', 'test', 'stable']

- debug:
    msg: "Local dev environment successfully set up. Run commands 'sudo su - {{ django_user }}' and 'runserver' to run the app."
  when: deployment_environment_id == 'local_development'

- debug:
    msg: "{{ deployment_environment_id }} environment successfully set up."
  when: deployment_environment_id != 'local_development'
