---

- include_role: name=update_packages

- name: Pull latest data from project repo branch {{ project_repo_branch }}
  git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
  become_user: "{{ django_user }}"
  ignore_errors: yes

- name: Install app python package requirements
  pip: requirements={{ metax_app_base_path }}/requirements.txt virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Delete old Django migration files
  file: path={{ metax_django_base_path }}/{{ django_app_name }}/migrations state=absent
  when: deployment_environment_id in ['local_development', 'playground', 'staging']

- name: Django makemigrations
  django_manage: command="makemigrations --noinput {{ django_app_name }}" app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Django migrate
  django_manage: command=migrate app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Django collectstatic
  django_manage: command=collectstatic app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"

- name: Load Django testdata to database
  django_manage: command=loaddata fixtures=metax_api/tests/testdata/test_data.json app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ django_user }}"
  when: deployment_environment_id in ['local_development', 'playground', 'staging']

- name: Make sure nginx server is running
  service: name=nginx state=started enabled=yes

- name: Make sure gunicorn service is restarted
  service: name=gunicorn state=restarted enabled=yes
  when: deployment_environment_id != 'local_development'

- debug:
    msg: "Local dev environment successfully set up. Run commands 'sudo su {{ django_user }}' and 'runserver' to run the app."
  when: deployment_environment_id == 'local_development'

# - name: Check if a reboot is required
#   shell: "[ -f /var/run/reboot-required ]"
#   failed_when: False
#   register: reboot_required
#   changed_when: reboot_required.rc == 0
#   notify: reboot
#   when: deployment_environment_id != 'local_development'
