---

- name: Install latest python pip, setuptools and pur
  pip: name={{ item }} state=latest
  with_items:
    - pip
    - setuptools
    - pur

- block:

    - name: Pull latest data from project remote repo branch {{ project_repo_branch }}
      git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
      become_user: "{{ app_user }}"
      register: pull_cmd
      ignore_errors: yes

    - block:

        - name: Stash repo changes since most likely git pull failed because of modifications in the local repo
          command: git stash
          args:
            chdir: "{{ metax_app_base_path }}"

        - name: Re-pull latest data from project remote repo branch {{ project_repo_branch }}
          git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
          become_user: "{{ app_user }}"

        - name: Unstash git repo
          shell: git stash apply
          args:
            executable: /bin/bash
            chdir: "{{ metax_app_base_path }}"
          become_user: "{{ app_user }}"

      when: pull_cmd.failed

  when: deployment_environment_id == 'local_development'

- block:

    - name: Pull latest data from project repo branch {{ project_repo_branch }}
      git: repo={{ project_repo }} dest={{ metax_app_base_path }} version={{ project_repo_branch }}
      become_user: "{{ app_user }}"

  when: deployment_environment_id in ['playground', 'test', 'stable']

- block:

    - include_role: name=app_config

  when: deployment_environment_id in ['local_development', 'playground', 'staging', 'production']

- block:

    - name: Copy deployment script to remote
      template: src=templates/update_metax_api_with_tags.sh dest=/tmp/update_metax_api_with_tags.sh owner={{ app_user }} mode=500

    - name: Fetch tags, checkout the tag {{ metax_api_tag }}
      shell: /tmp/update_metax_api_with_tags.sh {{ metax_api_tag }}
      register: shell_result
      become_user: "{{ app_user }}"

    - name: Print script output
      debug:
        var: shell_result.stdout_lines

  when: deployment_environment_id in ['staging', 'production']

- name: Update app python package requirements to their latest versions
  shell: pur --force --requirement {{ metax_app_base_path }}/requirements.txt
  become_user: "{{ app_user }}"
  when: deployment_environment_id == 'local_development'

- name: Install app python package requirements
  pip: requirements={{ metax_app_base_path }}/requirements.txt virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"

- name: Restart NGINX
  service: name=nginx state=restarted enabled=yes

- name: Restart Gunicorn
  service: name=gunicorn state=restarted enabled=yes
  when: deployment_environment_id != 'local_development'

- name: Django migrate
  django_manage: command=migrate app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"

- name: Django collectstatic
  django_manage: command=collectstatic app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  when: deployment_environment_id in ['local_development', 'playground', 'test', 'stable']

- name: Load Django testdata to database
  django_manage: command=loaddata fixtures=metax_api/tests/testdata/test_data.json app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  when: deployment_environment_id in ['local_development', 'playground', 'test', 'stable']

- name: Load Metax initial production data
  django_manage: command=loadinitialdata app_path={{ metax_django_base_path }} virtualenv={{ python_virtualenv_path }}
  become_user: "{{ app_user }}"
  when: deployment_environment_id != 'local_development'

- name: Run PUT requests on Django testdata
  shell: su - {{ app_user }} -c '{{ python_virtualenv_path }}/bin/python {{ metax_django_base_path }}/metax_api/tests/testdata/fetch_and_update_datasets.py'
  when: deployment_environment_id in ['playground', 'test', 'stable']
