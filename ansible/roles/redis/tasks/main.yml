---

- name: Check if Redis is installed as service
  stat: path=/etc/init.d/redis-server
  register: service_status

- block:
    - name: Place net.core.somaxconn config to /etc/rc.local
      lineinfile:
        path: /etc/rc.local
        insertbefore: '^exit 0'
        line: 'sysctl -w net.core.somaxconn=65535'
        state: present

    - name: Set net.core.somaxconn config
      command: sysctl -w net.core.somaxconn=65535

    - name: Place Disable Transparent Huge Pages config to /etc/rc.local
      lineinfile:
        path: /etc/rc.local
        insertbefore: '^exit 0'
        line: 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'
        state: present

    - name: Set Disable Transparent Huge Pages
      command: echo never > /sys/kernel/mm/transparent_hugepage/enabled
      become_user: root

    - name: Place vm.overcommit_memory = 1 config to /etc/sysctl.conf
      lineinfile:
        path: /etc/sysctl.conf
        line: 'vm.overcommit_memory = 1'
        state: present

    - name: Set vm.overcommit_memory = 1
      command: sysctl vm.overcommit_memory=1

    - name: Install Redis server and sentinel
      apt: pkg={{ item }} state=latest
      with_items:
        - redis-server
        - redis-sentinel

    - name: Add {{ django_user }} user to redis group
      user: name={{ django_user }} shell=/bin/bash groups=redis append=yes

  when: not service_status.stat.exists

- block:

  # install redis server and sentinel services

  - name: Copy redis master/slave config files
    template:
      src: templates/redis.conf
      dest: /etc/redis/redis-{{ item.redis_instance_number }}.conf
      owner: redis
      group: redis
      force: yes
      mode: 0640
    with_items:
      - "{{ redis_instance_1 }}"
      - "{{ redis_instance_2 }}"

  - name: Set a redis instance as slave in slave config file
    lineinfile:
      path: /etc/redis/redis-2.conf
      insertafter: '# slaveof host port'
      line: slaveof {{ redis_instance_master_host }} {{ redis_instance_master_port }}
      state: present

  - name: Install redis master/slave services
    template:
      src: templates/redis.service
      dest: /etc/systemd/system/redis-server-{{ item.redis_instance_number }}.service
      owner: root
      group: root
      force: yes
      mode: 0644
    with_items:
      - "{{ redis_instance_1 }}"
      - "{{ redis_instance_2 }}"

  - name: Copy redis sentinel config files
    template:
      src: templates/sentinel.conf
      dest: /etc/redis/sentinel-{{ item.redis_sentinel_number }}.conf
      owner: redis
      group: redis
      force: yes
      mode: 0640
    with_items:
      - "{{ redis_sentinel_1 }}"
      - "{{ redis_sentinel_2 }}"
      - "{{ redis_sentinel_3 }}"

  - name: Install redis sentinel services
    template:
      src: templates/sentinel.service
      dest: /etc/systemd/system/redis-sentinel-{{ item.redis_sentinel_number }}.service
      owner: root
      group: root
      force: yes
      mode: 0644
    with_items:
      - "{{ redis_sentinel_1 }}"
      - "{{ redis_sentinel_2 }}"
      - "{{ redis_sentinel_3 }}"

  - stat: path=/etc/systemd/system/redis.service
    register: redis_default_service

  - name: Set default Redis service to not auto-restart
    lineinfile:
      path: /etc/systemd/system/redis.service
      regexp: '^Restart=always'
      line: 'Restart=no'
    when: redis_default_service.stat.exists == True

  - name: Stop default Redis server and sentinel services
    service: name={{ item }} state=stopped enabled=no
    with_items:
      - redis-server
      - redis-sentinel

  - name: Start custom Redis server services
    service: name=redis-server-{{ item.redis_instance_number }} state=started enabled=yes
    with_items:
      - "{{ redis_instance_1 }}"
      - "{{ redis_instance_2 }}"

  - name: Start custom Redis sentinel services
    service: name=redis-sentinel-{{ item.redis_sentinel_number }} state=started enabled=yes
    with_items:
      - "{{ redis_sentinel_1 }}"
      - "{{ redis_sentinel_2 }}"
      - "{{ redis_sentinel_3 }}"
